// This file must be imported before loading html5-boilerplate
@import "compass/css3";
@import "compass/utilities";

// Basic colors
$dark-blue: #024;
$blue: #036;
$light-blue: #69c;
$dark-green: #242;
$green: #363;
$light-green: #9c9;
$dark-purple: #224;
$purple: #336;
$light-purple: #99c;
$gold: #663;
$light-gold: #ff9;
$dark-red: #422;
$red: #633;
$light-red: #c99;
$black: #111;
$dark-gray: #666;
$gray: #999;
$light-gray: #aaa;
$white: #fff;

$font-color: $black !default;

$link-color: $blue !default;
$link-hover-color: $light-blue !default;
$link-visited-color: $purple !default;

$selected-font-color: $white !default;
$selected-background-color: $dark-purple !default;

$valid-background-color: $light-green !default;
$invalid-background-color: $light-red !default;



/*--------------------------------------------------
	Layout 
  --------------------------------------------------

	Setting column sizes is now more flexible than
	before. You can now set your own breakpoints,
	as well as completely different layouts per
	breakpoint. (Defaults are now 12 columns at
	50rem and 65rem.)

  ---------------------------------------------------
*/

$small-width: 50rem;
$small-column: 1.25rem;
$small-gutter: 3rem;

$large-width: 65rem;
$large-column: 2.25rem;
$large-gutter: $small-gutter;

@mixin set-column($float, $columns: 3, $column-size: $small-column, $gutter-size: $small-gutter, $full-width: $small-width) {

// Breakpoints are set as 2em larger than the full width to care for hanging bullets
	@media screen and (min-width: ($full-width / 1rem * 1em) + 2em) {
		width: (($column-size / 1rem * 16px) * $columns) + ($gutter-size / 1rem * 16px * ($columns - 1));
		width: ($column-size * $columns) + ($gutter-size * ($columns - 1));
		float: $float;
	}
}

@mixin set-gutter($side, $columns: 0, $column-size: $small-column, $gutter-size: $small-gutter, $full-width: $small-width) {
	@media screen and (min-width: ($size-small / 1rem * 1em)) { 
		margin-#{$side}: ($column-size / 1rem * $columns) + ($gutter-size / 1rem * $columns) * 16px;
		margin-#{$side}: ($column-size / 1rem * $columns) + ($gutter-size / 1rem * $columns);
	}
}

@mixin side-line {
	margin: 0 0 0 -(($small-gutter / 1rem * 16px) / 3);
	margin: 0 0 0 -(($small-gutter) / 3);
	padding: 0 0 0 (($small-gutter / 1rem * 16px - 1px) / 3);
	padding: 0 0 0 (($small-gutter - .15rem) / 3);

	@media screen and (min-width: 60em) {
		margin-left: -(($large-gutter / 1rem * 16px) / 3);
		margin-left: -($large-gutter / 2);
		padding-left: (($large-gutter / 1rem * 16px - 1px) / 3);
		padding-left: (($large-gutter) / 2 - .15rem);
	}
}

/*--------------------------------------------------
	Typographic Scale 
  --------------------------------------------------
	http://modularscale.com/scale/?px1=16&px2=12&ra1=1.5&ra2=0
	
	Line-height can now be set by breakpoints.
*/

$base-plus-six: 5.063rem;
$base-plus-five: 3.375rem;
$base-plus-four: 2.25rem;
$base-plus-three: 1.688rem;
$base-plus-two: 1.5rem;
$base-plus-one: 1.125rem;
$base: 1rem;
$base-minus-one: .75rem;
$base-minus-two: .5rem;
$base-minus-three: .333rem;
$base-minus-four: .222rem;
$base-minus-five: .099rem;
$base-minus-six: .066rem;

$small-line-height: $base-plus-two;
$large-line-height: $base-plus-three;

@mixin set-size($property,$size) {
	#{$property}: ($size / 1rem) * 16px;
	#{$property}: $size;
}

// Base
@mixin line-height($line-height: $small-line-height, $break-width: $small-width) {
	@media screen and (min-width: ($break-width / 1rem * 1em) + 2em) {
		@include set-size(line-height, $line-height)	
	}
}


// Does not yet work with “auto”
@mixin margin-padding($property,$top, $right: $top, $bottom: $top, $left: $right) {
	#{$property}: (($top / 1rem) * 16px) (($right / 1rem) * 16px) (($bottom / 1rem) * 16px) (($left / 1rem) * 16px);
	#{$property}: $top $right $bottom $left;
}


// From http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

// Transitions
$color-transition: color 0.5s ease;
$background-transition: background 0.5s ease;
$border-transition: border 0.3s ease;
$opacity-transition: opacity 0.5s ease;
$width-transition: width .75s ease;
$height-transition: height .75s ease;

@mixin borders {
	border-top: ($base-minus-five / 1rem * 16px) solid $dark-blue;
	border-top: $base-minus-five solid $dark-blue;
	border-bottom: ($base-minus-five / 1rem * 16px) dotted $dark-blue;
	border-bottom: $base-minus-five dotted $dark-blue;
}

@mixin clearfix {
	content: ".";
	display: block;
	clear: both;
	visibility: hidden;
	line-height: 0;
	height: 0;
}

@mixin buttonify($background:$blue,$color: $white, $hover-background: darken($background, 15%), $hover-color: lighten($color, 15%)) {
	display: block;
	@include margin-padding(padding,$base-minus-one, 0rem);
	*overflow: visible;
	background: $background;
	color: $color;
	text-align: center;
	border: none;
	cursor: pointer;
	text-decoration: none;
	@include border-radius($base-minus-two, $base-minus-two);
	
	@include transition(color, .5s, ease);
	@include transition(background .5s, ease);
	
	&:hover {
		background: $hover-background;
		color: $hover-color;
	}
}

@mixin hide {
	visibility: hidden;
	position: fixed;
	right: 0;
}